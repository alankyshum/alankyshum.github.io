// STYLE CONFIG
$white: #fff;
$textColour: #fff;
$themeColour: #132147;
$lightenThemeColour: #0073d5;
// SIZES
$pictureWidth: 40vw;
$pictureLeftPadding: 20vw;
$layout_L: 1200px;
// MIXINS
@mixin minWidth($q) {
  @media screen and (min-width: $q) { @content }
}

:root {
  --theme-color: $themeColour;
  font-size: 16px;
  font-family: 'Montserrat', sans-serif;
  font-weight: 300;
  background-color: #111;
}

// STYLE BASE
a[href] {
  text-decoration: none;
}

#mainApp {
  display: flex;
}

.brief {
  $asidePadding: 30px;
  color: $textColour;
  background-color: var(--theme-color);
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  padding-right: $pictureLeftPadding;
  height: 100vh;
  width: 35vw;
  flex-grow: 0.5;
  min-width: 400px;
  box-sizing: border-box;
  @include minWidth($layout_L) {
    flex-grow: 0;
    width: calc(300px + #{$pictureLeftPadding});
  }
  &-logo {
    padding: $asidePadding;
    user-select: none;
    cursor: default;
    p {
      font-family: monospace;
      font-size: 36px;
      text-transform: uppercase;
      letter-spacing: 0;
      line-height: 1;
      margin: 0;
      padding: 0;
      transition: letter-spacing .3s;
    }
    &:hover {
      p {
        letter-spacing: 25px;
      }
    }
  }
  &-contacts {
    padding: $asidePadding;
    word-wrap: break-word;
    .contact {
      label {
        font-size: 1.2rem;
        display: block;
        font-weight: bold;
        margin-bottom: 5px;
      }
      a {
        font-size: 1rem;
        color: $textColour;
        box-sizing: border-box;
        &:hover {
          border-bottom: 1px dashed $textColour;
        }
      }
      p {
        margin: 0;
      }
    }
    .contact + .contact {
      margin-top: 20px;
    }
  }
}

.main {
  position: relative;
  display: flex;
  > div {
    display: inline-block;
  }
  .picture-wrapper {
    width: 0;
  }
  .picture {
    width: 40vw;
    height: 90vh;
    margin-top: 5vh;
    margin-left: -$pictureLeftPadding;
    @include minWidth($layout_L) {
      max-width: 700px;
    }
    img {
      filter: #{'grayscale' + '(' + ')'};
      object-fit: cover;
      width: 100%;
      height: 100%;
      box-shadow: 0px 0px 20px #000;
    }
  }
  .content {
    margin-left: $pictureLeftPadding;
    padding-left: 20px;
    color: $textColour;
    display: flex;
    flex-direction: column;
    justify-content: center;
    height: 100vh;
    &-name {
      * {
        margin: 0;
      }
      h1 {
        font-weight: 600;
        text-align: justify;
      }
      .label-line {
        position: relative;
        color: $lightenThemeColour;
        &:after {
          content: ' ';
          border-bottom: 2px solid $lightenThemeColour;
          width: 200px;
          height: 0;
          top: 0;
          left: -100px;
          z-index: 1;
          position: absolute;
        }
      }
    }
    &-title {
      margin-top: 5px;
    }

    // components
    &-caption {
      $itemHeight: 30px;
      margin-top: 10px;
      height: $itemHeight;
      > * {
        display: inline-block;
        vertical-align: middle;
      }
      .role-list {
        margin-top: 12px;
        height: 100%;
        overflow: hidden;
        ul {
          @mixin generateFadeItemsAnimation($showDuration, $fadeDuration, $itemsCnt, $displacement) {
            $totalDuration: ($showDuration + $fadeDuration) * $itemsCnt;
            animation: fadeItems #{$totalDuration}s infinite;
            @keyframes fadeItems {
              @for $i from 0 through $itemsCnt - 1 {
                #{($fadeDuration + $showDuration) * $i / $totalDuration * 100}% {
                  transform: translateY(#{-$displacement * $i});
                }
                #{($showDuration * ($i + 1) + $fadeDuration * $i) / $totalDuration * 100}% {
                  transform: translateY(#{-$displacement * $i});
                }
              }
              100% {
                transform: translateY(0);
              }
            }
          }
          margin: 0;
          padding: 0;
          transform: translateY(-$itemHeight);
          @include generateFadeItemsAnimation(1, 0.3, 4, $itemHeight);
          li {
            list-style: none;
            height: $itemHeight;
          }
        }
      }
    }
    &-resume {
      margin-top: 30px;
      button {
        $buttonWidth: 120px;
        color: $textColour;
        width: $buttonWidth;
        border: 1px solid $textColour;
        background: linear-gradient(to right, $lightenThemeColour 50%, transparent 50%);
        background-size: #{$buttonWidth * 2};
        background-position-x: -$buttonWidth;
        padding: 10px 20px;
        cursor: pointer;
        transition: background-position .3s;
        &:hover {
          background-position-x: 0;
        }
      }
    }
  }
}